{"name": "创建新的标签", "status": "failed", "statusDetails": {"message": "AssertionError: 断言状态码等于200", "trace": "all_case_info = [3007976975120]\n\n    @pytest.mark.parametrize(\n        \"all_case_info\",\n        case_info_list,\n        ids=case_name_list,\n    )\n    def test_(all_case_info):\n        set_allure_info(all_case_info)  # 1. 设置allure报告定制\n>       run_case(all_case_info)  # 2. 执行接口请求和断言\n\n..\\..\\TSL_work\\tests\\test_case.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nall_case_info = [3007976975120]\n\n    def run_case(all_case_info):\n        for case_info in all_case_info:\n            # 1. request 请求接口\n            request = case_info.request  # 字典  -> 字符串  -> 替换变量  -> 字典  ->传参\n            request_str = yaml.safe_dump(request, allow_unicode=True)  # 字典转字符串\n    \n            # new_request_str = Template(request_str).safe_substitute(extrac_data) # string的Template，只支持变量，不支持函数\n            ## pytest-yaml的Template，支持变量，也支持函数\n            new_request_str = Template(request_str).render(extrac_data)\n    \n            # print(f\"{request_str=}\")\n            # print(f\"{new_request_str=}\")\n            new_request = yaml.safe_load(new_request_str)  # 字符串转字典\n    \n            resp = session.request(**new_request)\n            try:\n                resp.json = resp.json()  # 把带括号的结果，报错到不带括号的属性\n            except:\n                resp.json = {\"msg\": \"is not json data\"}\n    \n            # 2. extract 提取返回数据\n            if isinstance(case_info.extract, dict):\n                for val_name, val_expr in case_info.extract.items():\n                    attr = dict(getattr(resp, val_expr[0]))  # 通过反射+ 表达式第一项，得到全部数据\n                    # print(attr)\n    \n                    # 通过jsonpath+ 表达式第二项，得到指定数据（列表）\n                    val_value_list = jsonpath.jsonpath(attr, val_expr[1])\n                    # print(val_value_list)\n    \n                    if val_value_list:\n                        val_value = val_value_list[val_expr[2]]  # 表达式第二项，得到指定数据中的指定数据（单个数据）\n                    else:\n                        val_value = \"no data\"\n                    # print(val_name, '=', val_value)\n                    extrac_data[val_name] = val_value\n    \n                    logger.info(f\"提取到变量 {val_name} = {val_value}\")\n                    yaml_file.write(extrac_data)\n                    if val_name.startswith(\"session_\"):  # 如果是session级变量\n                        params = session.params or {}\n                        params[val_name[8:]] = val_value\n                        session.params = params  # 赋值给session\n    \n            # 3. validate 断言\n    \n            for assert_type, assert_expr in case_info.validate.items():\n                match assert_type:\n                    case \"equals\":\n                        logger.info(f\"这是相等断言 {assert_expr}\")\n                        for key, value in assert_expr.items():\n                            assert_msg = key  # 断言提示\n                            # 字典get方法：根据key取值，如果没有就返回默认值\n                            var_value = extrac_data.get(value[0], \"no data\")\n                            attr = getattr(resp, value[0], var_value)  # 反射取值\n                            expect = value[1]  # 预期结果\n    \n                            # 1. 如果resp有这个这个属性，就返回属性\n                            # 2. 如果resp没有这个属性，但是有这个变量，就返回变量\n                            # 2. 如果resp没有这个属性，也没有这个变量，就返no data\n    \n                            logger.info(f\"{attr}== {expect}, {assert_msg}\")\n>                           assert attr == expect, assert_msg\nE                           AssertionError: 断言状态码等于200\n\n..\\..\\TSL_work\\commons\\case_util.py:150: AssertionError"}, "attachments": [{"name": "log", "source": "5c3bd546-25f2-4a32-a844-10efd57c65ca-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "all_case_info", "value": "[3007976975120]"}], "start": 1697970341316, "stop": 1697970342387, "uuid": "dacb4c0f-1c49-4832-bddc-076beb912ee5", "historyId": "9861ea3ad4b4552d5d69e2e3b56ef55b", "testCaseId": "6867d99c0ff7854d8300695526c962c6", "fullName": "tests.test_case#test_", "labels": [{"name": "epic", "value": "码尚教育自动化测试系统"}, {"name": "feature", "value": "北凡默认模块"}, {"name": "story", "value": "标签功能"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_case"}, {"name": "host", "value": "DESKTOP-PQP0GV0"}, {"name": "thread", "value": "22372-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_case"}]}